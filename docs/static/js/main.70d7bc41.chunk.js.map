{"version":3,"sources":["components/AddSerie.js","components/GifItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifts.js","GifExpertApp.js","index.js"],"names":["AddSerie","handleAdd","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","type","value","onChange","target","prototype","PropTypes","func","isRequired","GifItem","id","title","url","className","src","alt","getGifs","categoria","a","encodeURI","fetch","res","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifts","key","GifExpertApp","series","setSeries","serie","ReactDOM","render","document","getElementById"],"mappings":"sMAIaA,EAAW,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAAgB,EACHC,mBAAS,IADN,mBAChCC,EADgC,KACpBC,EADoB,KAiBvC,OACI,sBAAMC,SAXY,SAACC,GACnBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,EAAUE,GACVC,EAAc,MAMlB,SACI,uBACIM,KAAK,OACLC,MAAQR,EACRS,SAnBe,SAACN,GACxBF,EAAcE,EAAEO,OAAOF,aAwB/BX,EAASc,UAAY,CACjBb,UAAWc,IAAUC,KAAKC,Y,WC/BjBC,EAAU,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAEjC,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAMF,EAAMG,IAAMJ,IACvB,4BAAKA,Q,gCCLJK,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACfN,EADe,gDACgCO,UAAUF,GAD1C,+DAEDG,MAAOR,GAFN,cAEbS,EAFa,gBAGIA,EAAIC,OAHR,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAKc,EAAIC,OAAOC,iBAAiBhB,QATtB,kBAaZY,GAbY,4CAAH,sDC4BLK,EAxBC,SAAC,GAAmB,IAAjBZ,EAAgB,EAAhBA,UAAgB,ECDN,SAAEA,GAAc,IAAD,EACdxB,mBAAS,CAC/B8B,KAAM,GACNO,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAoBxC,OAdAC,qBAAW,WAEPjB,EAASC,GAAYiB,MAAM,SAAAC,GACvBC,YAAW,WACPJ,EAAS,CACLT,KAAMY,EACNL,SAAS,MAEf,UAGP,CAAEb,IAGEc,EDjB0BM,CAAepB,GAAnCU,EAFkB,EAEvBJ,KAAaO,EAFU,EAEVA,QAGrB,OACI,qCACI,6BAAMb,IACJa,GAAW,mBAAGjB,UAAU,mCAAb,qBACb,qBAAKA,UAAU,YAAf,SAEQc,EAAOF,KAAK,SAAAC,GACR,OAAO,wBAAC,EAAD,2BAAcA,GAAd,IAAoBY,IAAKZ,EAAIhB,eEa7C6B,EAzBM,WAAO,IAAD,EAEK9C,mBAAS,CAAC,SAFf,mBAEhB+C,EAFgB,KAERC,EAFQ,KAMvB,OACI,qCACI,4CACA,oDACA,cAAC,EAAD,CAAUjD,UANA,SAAEkD,GAAF,OAAWD,GAAW,SAAAV,GAAK,OAAKW,GAAL,mBAAeX,UAOpD,uBAGA,6BAEQS,EAAOf,KAAK,SAAAiB,GACR,OAAO,cAAC,EAAD,CAASzB,UAAYyB,GAAaA,Y,MCjBjEC,IAASC,OAAQ,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.70d7bc41.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport const AddSerie = ({ handleAdd }) => {\n    const [inputValue, setinputValue] = useState('')\n\n    const handlerInputChange = (e)=>{\n        setinputValue(e.target.value)\n    }\n\n    const handlerSubmit = (e)=>{\n        e.preventDefault()\n\n        if(inputValue.trim().length > 2){\n            handleAdd(inputValue)\n            setinputValue('')\n        }\n\n    }\n\n    return (\n        <form onSubmit={ handlerSubmit }>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handlerInputChange }\n            />\n        </form>\n    )\n}\n\nAddSerie.prototype = {\n    handleAdd: PropTypes.func.isRequired\n}","import React from 'react'\n\nexport const GifItem = ({ id, title, url }) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","\n\nexport const getGifs = async ( categoria )=>{\n    var url = `http://api.giphy.com/v1/gifs/search?q=${encodeURI(categoria)}&limit=10&api_key=YGlVMSgh8VPiM09xzTVeggPsGlmzyoIF`\n    const res = await fetch( url )\n    const { data } = await res.json()\n\n    const gifs = data.map( img =>{\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    })\n\n    return gifs\n}","\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { GifItem } from './GifItem'\nimport { useFetchGifts } from '../hooks/useFetchGifts'\n\nconst GifGrid = ({ categoria }) => {\n\n    const { data:images, loading } = useFetchGifts( categoria )\n    \n\n    return (\n        <>\n            <h3>{ categoria }</h3>\n            { loading && <p className=\"animate__animated animate__flash\" >Loading</p> }\n            <div className=\"card-grid\">\n                {\n                    images.map( img => {\n                        return <GifItem { ...img } key={img.id}/>\n                    })\n                }\n            </div>\n        </>\n    )\n}\n\nGifGrid.propTypes = {\n    categoria : PropTypes.string.isRequired\n}\n\nexport default GifGrid\n","import { useState } from \"react\"\nimport { useEffect } from \"react/cjs/react.development\";\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifts = ( categoria )=>{\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect( ()=>{\n\n        getGifs( categoria ).then( imgs =>{\n            setTimeout(() => {\n                setState({\n                    data: imgs,\n                    loading: false\n                }) \n            },2000);\n        })\n\n    }, [ categoria ])\n\n\n    return state\n}","\nimport React from 'react'\nimport { useState } from 'react'\nimport { AddSerie } from './components/AddSerie'\nimport GifGrid from './components/GifGrid'\n\nconst GifExpertApp = () => {\n\n    const [series, setSeries] = useState(['amor'])\n\n    const handleAdd = ( serie )=>setSeries( state => [serie, ...state] )\n\n    return (\n        <>\n            <h2> Gifs App </h2>\n            <p>Cual tema te gusta?</p>\n            <AddSerie handleAdd={ handleAdd }/>\n            <hr></hr>\n\n\n            <ol>\n                {\n                    series.map( serie => {\n                        return <GifGrid categoria={ serie } key={serie}/>\n                    })\n                }\n            </ol>\n        </>\n    )\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render( <GifExpertApp />, document.getElementById('root') );"],"sourceRoot":""}